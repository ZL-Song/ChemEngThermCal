<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:ChemEngThermCal.Controls">
    <!--颜色及纯色画刷-->
    <Color x:Key="uiBlack" >#FF000000</Color>
    <SolidColorBrush x:Key="uiBlackSolidColorBrush" Color="{DynamicResource uiBlack}"></SolidColorBrush>
    <Color x:Key="uiRed" >#FFF38B76</Color>
    <SolidColorBrush x:Key="uiRedSolidColorBrush" Color="{DynamicResource uiRed}"></SolidColorBrush>
    <Color x:Key="uiShallowBlack" >#FF181818</Color>
    <SolidColorBrush x:Key="uiShallowBlackSolidColorBrush" Color="{DynamicResource uiShallowBlack }"></SolidColorBrush>
    <Color x:Key="uiMediumGray" >#FF404040</Color>
    <SolidColorBrush x:Key="uiMediumGraySolidColorBrush" Color="{DynamicResource uiMediumGray}"></SolidColorBrush>
    <Color x:Key="uiLightGrayForText" >#FF999999</Color>
    <SolidColorBrush x:Key="uiLightGrayForTextSolidColorBrush" Color="{DynamicResource uiLightGrayForText}"></SolidColorBrush>
    <Color x:Key="uiWhite" >#FFFFFFFF</Color>
    <SolidColorBrush x:Key="uiWhiteSolidColorBrush" Color="{DynamicResource uiWhite}"></SolidColorBrush>
    <Color x:Key="uiPurple" >#FF68217A</Color>
    <SolidColorBrush x:Key="uiPurpleSolidColorBrush" Color="{DynamicResource uiPurple}"></SolidColorBrush>
    <Color x:Key="uiDeepBlue" >#FF003366</Color>
    <SolidColorBrush x:Key="uiDeepBlueSolidColorBrush" Color="{DynamicResource uiDeepBlue}"></SolidColorBrush>
    <Color x:Key="uiGreen" >#FF8DD28A</Color>
    <SolidColorBrush x:Key="uiGreenSolidColorBrush" Color="{DynamicResource uiGreen}"></SolidColorBrush>
    <Color x:Key="uiLightBlue" >#FF007ACC</Color>
    <SolidColorBrush x:Key="uiLightBlueSolidColorBrush" Color="{DynamicResource uiLightBlue}"></SolidColorBrush>
    <Color x:Key="uiDeepDarkGray">#FF1E1E1E</Color>
    <SolidColorBrush x:Key="uiDeepDarkGraySolidColorBrush" Color="{DynamicResource uiDeepDarkGray}"></SolidColorBrush>
    <Color x:Key="uiDarkGray">#FF2D2D30</Color>
    <SolidColorBrush x:Key="uiDarkGraySolidColorBrush" Color="{DynamicResource uiDarkGray}"></SolidColorBrush>
    <Color x:Key="uiLightGray">#FFC7C7C7</Color>
    <SolidColorBrush x:Key="uiLigthGraySolidColorBrush" Color="{DynamicResource uiLightGray}"></SolidColorBrush>
    <Color x:Key="uiShallowLightGray">#FFDDDDDD</Color>
    <!-- 渐变画刷 -->
    <!-- 紫色到深蓝 横向渐变 -->
    <LinearGradientBrush x:Key="uiHorizontalPurpleDeepBlueLinearGradientBrush">
        <GradientStop Color="{DynamicResource uiPurple}" Offset="1"/>
        <GradientStop Color="{DynamicResource uiDeepBlue}" Offset="0"/>
    </LinearGradientBrush>
    <!-- 带副标题的 RadioButton 的样式-->
    <Style TargetType="{x:Type local:ViceHeaderRadioButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource uiMediumGraySolidColorBrush }"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ViceHeaderRadioButton}">
                    <Grid  UseLayoutRounding="True"  Background="{TemplateBinding Background}" Width="{TemplateBinding Width}">
                        <!--鼠标悬停时的黑色背景-->
                        <Border x:Name="Bg" IsHitTestVisible="False" Background="{TemplateBinding Background}" Width="{TemplateBinding Width}"/>
                        <!--标题-->
                        <Label x:Name="HeaderContent" IsHitTestVisible="False" IsEnabled="False" Margin="10,8,0,8"  Content="{TemplateBinding Content}" Grid.Row="1" Foreground="{DynamicResource uiWhiteSolidColorBrush}" FontSize="18"/>
                        <!--副标题 鼠标悬停时显示-->
                        <Label x:Name="ViceHeaderContent" IsHitTestVisible="False" IsEnabled="False" Margin="10,8,0,8" Content="{TemplateBinding ViceHeader}" Foreground="{DynamicResource uiWhiteSolidColorBrush}" FontSize="{DynamicResource LabelFontSizeKey}" Opacity="0" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualState Name="Normal">
                                    <Storyboard >
                                        <DoubleAnimation Storyboard.TargetName="ViceHeaderContent" Storyboard.TargetProperty="Opacity" To="0" From="1" Duration="0:0:.3"/>
                                        <ThicknessAnimation Storyboard.TargetName="ViceHeaderContent" Storyboard.TargetProperty="Margin" To="10,20,0,-4" From="10,8,0,8" Duration="0:0:.5">
                                            <ThicknessAnimation.EasingFunction>
                                                <CircleEase EasingMode="EaseOut"/>
                                            </ThicknessAnimation.EasingFunction>
                                        </ThicknessAnimation>
                                        <ThicknessAnimation Storyboard.TargetName="ViceHeaderContent" Storyboard.TargetProperty="Margin" To="10,8,0,8" BeginTime="0:0:.5">
                                            <ThicknessAnimation.EasingFunction>
                                                <CircleEase EasingMode="EaseOut"/>
                                            </ThicknessAnimation.EasingFunction>
                                        </ThicknessAnimation>
                                        <DoubleAnimation Storyboard.TargetName="HeaderContent" Storyboard.TargetProperty="Opacity" To="1" From="0" Duration="0:0:.3"/>
                                        <ThicknessAnimation Storyboard.TargetName="HeaderContent" Storyboard.TargetProperty="Margin" To="10,8,0,8" From="10,-4,0,20" Duration="0:0:.5">
                                            <ThicknessAnimation.EasingFunction>
                                                <CircleEase EasingMode="EaseOut"/>
                                            </ThicknessAnimation.EasingFunction>
                                        </ThicknessAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="MouseOver">
                                    <Storyboard >
                                        <DoubleAnimation Storyboard.TargetName="ViceHeaderContent" Storyboard.TargetProperty="Opacity" To="1" From="0" Duration="0:0:.3"/>
                                        <ThicknessAnimation Storyboard.TargetName="ViceHeaderContent" Storyboard.TargetProperty="Margin" To="10,8,0,8" From="10,20,0,-4" Duration="0:0:.5">
                                            <ThicknessAnimation.EasingFunction>
                                                <CircleEase EasingMode="EaseOut"/>
                                            </ThicknessAnimation.EasingFunction>
                                        </ThicknessAnimation>
                                        <DoubleAnimation Storyboard.TargetName="HeaderContent" Storyboard.TargetProperty="Opacity" To="0" From="1" Duration="0:0:.3"/>
                                        <ThicknessAnimation Storyboard.TargetName="HeaderContent" Storyboard.TargetProperty="Margin" To="10,-4,0,20" From="10,8,0,8" Duration="0:0:.5">
                                            <ThicknessAnimation.EasingFunction>
                                                <CircleEase EasingMode="EaseOut"/>
                                            </ThicknessAnimation.EasingFunction>
                                        </ThicknessAnimation>
                                        <ThicknessAnimation Storyboard.TargetName="HeaderContent" Storyboard.TargetProperty="Margin" To="10,8,0,8" BeginTime="0:0:.5"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers >
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Bg" Property="Control.Background" Value="{DynamicResource uiHorizontalPurpleDeepBlueLinearGradientBrush}"/>
                        </Trigger>
                        <MultiTrigger >
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="Bg" Property="Control.Background" Value="{DynamicResource uiShallowBlackSolidColorBrush}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--带前置内容与后置内容并只允许输入数字的 NumberTextBox 样式-->
    <Style TargetType="{x:Type local:NumberTextBox}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Foreground" Value="{StaticResource uiWhiteSolidColorBrush}"/>
        <Setter Property="SelectionBrush" Value="{StaticResource uiWhiteSolidColorBrush}"/>
        <Setter Property="CaretBrush" Value="{StaticResource uiWhiteSolidColorBrush}"/>
        <Setter Property="Cursor" Value="IBeam" />
        <Setter Property="TextWrapping" Value="WrapWithOverflow" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="40" />
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="InputMethod.IsInputMethodEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:NumberTextBox}">
                    <!--<ControlTemplate.Resources >
                        <ControlTemplate x:Key="TextBoxScrollViewer" TargetType="{x:Type ScrollViewer}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                -->
                    <!--ScrollContentPresenter 的 Margin 属性用于调整 TextBox 的 PART_ContentHost 组件的内容形式-->
                    <!--
                                <ScrollContentPresenter Margin="3" Grid.Row="0" Grid.Column="0" Grid.RowSpan="2" Grid.ColumnSpan="2"/>
                                <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1" Value="{TemplateBinding VerticalOffset}"
                                           Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}"
                                           Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                                <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Grid.Column="0" Value="{TemplateBinding HorizontalOffset}" 
                                           Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" 
                                           Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Orientation="Horizontal"/>
                            </Grid>
                        </ControlTemplate>
                    </ControlTemplate.Resources>-->
                    <Grid Background="{DynamicResource uiMediumGraySolidColorBrush}" >
                        <Grid.RowDefinitions >
                            <RowDefinition />
                            <RowDefinition Height="30"/>
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions >
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <!--文本框整体背景 用于提供 Mouse.Hover 的视觉反馈-->
                        <Border x:Name="Bg" Grid.Column="0" Background="{TemplateBinding Background}" Grid.Row="0" Grid.RowSpan="3" Grid.ColumnSpan="3"/>
                        <!--必须将 ScrollViewer 命名为 PART_ContentHost，否则WPF将无法识别它 同时该组件必须在 Z向最顶部，否则无法交互 -->
                        <ScrollViewer x:Name="PART_ContentHost" Grid.Column="1" Grid.Row="1" />
                        <!--前置标题 -->
                        <Label x:Name="LeadingContent" Content="{TemplateBinding LeadingContent}" Foreground="{DynamicResource uiWhiteSolidColorBrush}" FontSize="{DynamicResource LabelFontSizeKey}" Grid.Row="1" HorizontalAlignment="Left"/>
                        <!--后置标题 -->
                        <Label x:Name="FollowingContent" Content="{TemplateBinding FollowingContent}" Foreground="{Binding ElementName=LeadingContent ,Path=Foreground}" Grid.Column="2" Grid.Row="1" HorizontalAlignment="Right"/>
                    </Grid>
                    <ControlTemplate.Triggers >
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsReadOnly" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="Bg" Property="Control.Background" Value="{DynamicResource uiShallowBlackSolidColorBrush}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Bg" Property="Control.Background" Value="{DynamicResource uiHorizontalPurpleDeepBlueLinearGradientBrush}"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="Bg" Property="Control.Background" Value="{DynamicResource uiBlackSolidColorBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Bg" Property="Control.Background" Value="{DynamicResource uiBlackSolidColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--带标题的 ComboBox 样式 -->
    <Style TargetType="{x:Type local:HeaderComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:HeaderComboBox}">
                    <ControlTemplate.Resources>
                        <ControlTemplate x:Key="ComboBoxPopupScrollViewerTemplate" TargetType="{x:Type ScrollViewer}">
                            <Grid UseLayoutRounding="False">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <ScrollContentPresenter Grid.Row="0" Grid.Column="0"/>
                                <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1" Value="{TemplateBinding VerticalOffset}"
                                           Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}"
                                           Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                            </Grid>
                        </ControlTemplate>
                        <ControlTemplate x:Key="ComboBoxToggleButtonTemplate" TargetType="{x:Type ToggleButton}">
                            <Grid Background="Transparent" UseLayoutRounding="False"  >
                                <Grid.ColumnDefinitions >
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Border x:Name="Bg" Grid.ColumnSpan="2" Background="{DynamicResource uiMediumGraySolidColorBrush}"/>
                                <!--右侧的箭头 -->
                                <Path x:Name="Arrow" HorizontalAlignment="Right" VerticalAlignment="Top" IsHitTestVisible="False" 
                                      Data="M 0 16 L 10 6 L 10 0 L 0 10 L -10 0 L -10 6 Z"
                                      Fill="{DynamicResource uiMediumGraySolidColorBrush}" Grid.Column="1" Margin="0,10,10,0"/>
                            </Grid>
                            <ControlTemplate.Triggers >
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="Bg" Property="Control.Background" Value="{DynamicResource uiHorizontalPurpleDeepBlueLinearGradientBrush}"/>
                                    <Setter TargetName="Bg" Property="Control.BorderThickness" Value="1.5,1.5,1.5,0"/>
                                    <Setter TargetName="Bg" Property="Control.BorderBrush" Value="{DynamicResource uiLigthGraySolidColorBrush}"/>
                                    <Setter TargetName="Arrow" Property="Opacity" Value="0"/>
                                </Trigger>
                                <MultiTrigger >
                                    <MultiTrigger.Conditions >
                                        <Condition Property="IsMouseOver" Value="True"/>
                                        <Condition Property="IsChecked" Value="False"/>
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.Setters >
                                        <Setter TargetName="Bg" Property="Control.Background" Value="{DynamicResource uiShallowBlackSolidColorBrush}"/>
                                    </MultiTrigger.Setters>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </ControlTemplate.Resources>
                    <Grid >
                        <Grid.RowDefinitions >
                            <RowDefinition Height="30"/>
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions >
                            <ColumnDefinition />
                            <ColumnDefinition Width="50"/>
                        </Grid.ColumnDefinitions>
                        <!-- ToggleButton 已数据绑定到 ComboBox 本身以切换 IsDropDownOpen -->
                        <ToggleButton x:Name="ToggleButton" Focusable="false" ClickMode="Press" Template="{StaticResource ComboBoxToggleButtonTemplate }"
                                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.ColumnSpan="2" Grid.RowSpan="2"/>
                        <!-- Header 内容-->
                        <Label Name="Header" Content="{TemplateBinding Header}" Grid.ColumnSpan="2" FontSize="{DynamicResource LabelFontSizeKey}" IsHitTestVisible="False" Foreground="{DynamicResource uiLightGrayForTextSolidColorBrush}"/>
                        <!--内容文本 Content="{TemplateBinding SelectionBoxItem}" -->
                        <Label x:Name="ContentLabel" Content="{TemplateBinding SelectionBoxItem}" IsHitTestVisible="False" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Foreground="{DynamicResource uiWhiteSolidColorBrush}" Grid.Row="1" FontSize="{DynamicResource HeaderFontSizeKey}" Grid.ColumnSpan="2" HorizontalAlignment="Left"/>
                        <!-- Popup 可显示 ComboBox 中的项列表。IsOpen 已数据绑定到通过 ComboBoxToggleButton 来切换的 IsDropDownOpen -->
                        <Popup x:Name="Popup" IsOpen="{TemplateBinding IsDropDownOpen}" Focusable="False" Grid.Column="1" Grid.ColumnSpan="2" AllowsTransparency="True" PopupAnimation="Slide" VerticalOffset="-1" >
                            <Grid x:Name="DropDown" SnapsToDevicePixels="True" Width="{Binding ElementName=ToggleButton ,Path=ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder" Background="{DynamicResource uiShallowBlackSolidColorBrush}" BorderThickness="1.5,0,1.5,1.5" BorderBrush="{DynamicResource uiLigthGraySolidColorBrush}">
                                    <ScrollViewer Template="{StaticResource ComboBoxPopupScrollViewerTemplate}" SnapsToDevicePixels="True">
                                        <!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Header" Property="Control.Foreground" Value="{DynamicResource uiWhiteSolidColorBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="Header" Property="Control.Foreground" Value="{DynamicResource  uiLightGrayForTextSolidColorBrush}"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="15" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
